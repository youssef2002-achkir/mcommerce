{"ast":null,"code":"export const createOrder = (productId, orderQuantity) => {\n  fetch(`http://localhost:5001/orders/newOrder`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      productId,\n      orderQuantity\n    })\n  }).then(response => response.json()).catch(error => {\n    console.error('Error creating the order:', error);\n  });\n};\nexport async function getAllOrders() {\n  try {\n    const response = await fetch(`http://localhost:5001/orders/all`);\n    if (!response.ok) {\n      throw new Error('Network response error');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\nexport const deleteOrder = orderId => {\n  try {\n    const response = fetch(`http://localhost:5001/orders/deleteOrder/${orderId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete order');\n    }\n    return response.json();\n  } catch (error) {\n    throw error;\n  }\n};\nexport async function updateOrder(orderId, orderQuantity) {\n  fetch(`http://localhost:5001/orders/updateOrder/${orderId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      orderId,\n      orderQuantity\n    })\n  }).then(response => response.json()).catch(error => {\n    console.log('Error Updating your Order :', error);\n  });\n}","map":{"version":3,"names":["createOrder","productId","orderQuantity","fetch","method","headers","body","JSON","stringify","then","response","json","catch","error","console","getAllOrders","ok","Error","data","deleteOrder","orderId","updateOrder","log"],"sources":["C:/MICROSERVICES/Mcommerce-SpringBoot/McommerceNodeJs/ecomerce-client/src/api/order-service.js"],"sourcesContent":["export const createOrder = (productId, orderQuantity) => {\r\n    fetch(`http://localhost:5001/orders/newOrder`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        productId,\r\n        orderQuantity,\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      \r\n      .catch((error) => {\r\n        console.error('Error creating the order:', error);\r\n      });\r\n  };\r\n\r\nexport async function  getAllOrders(){\r\n  try {\r\n    const response = await fetch(`http://localhost:5001/orders/all`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response error')\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const deleteOrder = (orderId) => {\r\n  try {\r\n    const response = fetch(`http://localhost:5001/orders/deleteOrder/${orderId}`, {\r\n      method: 'DELETE',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete order');\r\n    }\r\n\r\n    return response.json();\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport async function updateOrder(orderId, orderQuantity) {\r\n  fetch(`http://localhost:5001/orders/updateOrder/${orderId}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type' : 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      orderId,\r\n      orderQuantity\r\n    }),\r\n  })\r\n  .then((response) => response.json())\r\n  .catch( (error) => {\r\n    console.log('Error Updating your Order :', error);\r\n  })\r\n}"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAGA,CAACC,SAAS,EAAEC,aAAa,KAAK;EACrDC,KAAK,CAAE,uCAAsC,EAAE;IAC7CC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBP,SAAS;MACTC;IACF,CAAC;EACH,CAAC,CAAC,CACCO,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAEnCC,KAAK,CAAEC,KAAK,IAAK;IAChBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;EACnD,CAAC,CAAC;AACN,CAAC;AAEH,OAAO,eAAgBE,YAAYA,CAAA,EAAE;EACnC,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMP,KAAK,CAAE,kCAAiC,CAAC;IAChE,IAAI,CAACO,QAAQ,CAACM,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IACA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACC,IAAI,CAAC,CAAC;IAClC,OAAOO,IAAI;EACb,CAAC,CAAC,OAAOL,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,MAAMM,WAAW,GAAIC,OAAO,IAAK;EACtC,IAAI;IACF,MAAMV,QAAQ,GAAGP,KAAK,CAAE,4CAA2CiB,OAAQ,EAAC,EAAE;MAC5EhB,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAI,CAACM,QAAQ,CAACM,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,OAAOP,QAAQ,CAACC,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,eAAeQ,WAAWA,CAACD,OAAO,EAAElB,aAAa,EAAE;EACxDC,KAAK,CAAE,4CAA2CiB,OAAQ,EAAC,EAAE;IAC3DhB,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAG;IACnB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBY,OAAO;MACPlB;IACF,CAAC;EACH,CAAC,CAAC,CACDO,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCC,KAAK,CAAGC,KAAK,IAAK;IACjBC,OAAO,CAACQ,GAAG,CAAC,6BAA6B,EAAET,KAAK,CAAC;EACnD,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}